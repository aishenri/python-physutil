{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# À la découverte de notre ADN\n",
    "\n",
    "##### Germain Salvato-Vallverdu [germain.vallverdu@univ-pau.fr](mailto:germain.vallverdu@univ-pau.fr)\n",
    "\n",
    "L'objectif de ce TP est de dmettre en pratique le langage python pour construire\n",
    "et analyser un brin d'[ADN](https://fr.wikipedia.org/wiki/Acide_d%C3%A9soxyribonucl%C3%A9ique).\n",
    "L'idée est, dans un premier temps, de reprendre les\n",
    "éléments de base du langage (condition, boucles ...) pour créer des fonctions qui\n",
    "construise un brin d'ADN, le lisent, réalise une transcription une traduction ...\n",
    "puis d'écrire une classe qui réalise ces actions.\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Ce n'est pas l'objet de faire ici un cours complet sur l'ADN. Vous trouverez\n",
    "de nombreuses choses sur le sujet. On va juste rappeler quelques éléments de base\n",
    "pour qu'un *non biologiste* puisse faire le TP.\n",
    "\n",
    "### ADN ?\n",
    "\n",
    "L'ADN, pour Acide DésoxyriboNucléique, est une macromolécule constituée de deux\n",
    "brins qui forme une double hélice maintenue par des liaisons hydrogène. Ces brins\n",
    "sont formés par un enchainement de maillons appelés, nucléotides qui contiennent\n",
    "les *bases* de l'ADN :\n",
    "\n",
    "* A pour Adénine\n",
    "* T pour Thymine\n",
    "* G pour Guanine\n",
    "* C pour Cytosine\n",
    "\n",
    "Les bases de l'ADN fonctionnent par paire, une sur chaque brin : adénine avec\n",
    "thymine et guanine avec cytosine.\n",
    "\n",
    "[![DNA](./DNA.png)](https://commons.wikimedia.org/wiki/File:DNA_chemical_structure-1-.fr.svg)\n",
    "\n",
    "### Traduction et transcription\n",
    "\n",
    "**La transcription** est un mécanisme qui permet de \"recopier\" l'ADN dans le noyau\n",
    "de la cellule pour former un ARN (acide ribonucléique) qui sera utilisé dans la\n",
    "cellule notamment lors de la traduction. L'ARN présente la même structure que\n",
    "l'ADN mais lors de la transicription, la thymine (T) est remplacé par l'uracile\n",
    "(U).\n",
    "\n",
    "**La traduction de l'ADN** consiste à lire l'ARN issue de la transcription pour\n",
    "synthétiser une protéine avec l'aide de la machinerie cellulaire. L'ARN est\n",
    "découpé en codons qui sont constitués de 3 bases et correspondent à un \n",
    "[acide aminé](https://fr.wikipedia.org/wiki/Acide_amin%C3%A9_prot%C3%A9inog%C3%A8ne), \n",
    "c'est le code génétique. Les codons sont lus les uns à la suite des\n",
    "autres et la protéines est assemblée comme une chaîne (peptidique)\n",
    "[d'acides aminés](https://fr.wikipedia.org/wiki/Acide_amin%C3%A9_prot%C3%A9inog%C3%A8ne).\n",
    "\n",
    "![traduction de l'ADN](./traduction.png)\n",
    "\n",
    "### Correspondance codons - acides aminés\n",
    "\n",
    "Le schéma ci-dessous vous donne la correspondance entre un codon, composé de\n",
    "trois bases de l'ARN et un\n",
    "[acide aminé](https://fr.wikipedia.org/wiki/Acide_amin%C3%A9_prot%C3%A9inog%C3%A8ne).\n",
    "\n",
    "[![code génétique](./codegenetique.png)](http://www.cours-pharmacie.com/biologie-moleculaire)\n",
    "\n",
    "Par exemple, GUA est un codon qui code pour l'acide aminé Val, c'est à dire\n",
    "la Valine. On remarquera que plusieurs codons peuvent coder pour le même acide\n",
    "aminé ce qui limite la portée des erreurs de copies ou des mutations. On note\n",
    "également la présence de codons STOP indiquant la fin de la partie \"codante\" et\n",
    "qui stoppe la synthèse de la protéine.\n",
    "\n",
    "## Les dictionnaires python\n",
    "\n",
    "Pour entrer le code génétique dans python on pourra utiliser les dictionnaires.\n",
    "Ces objets python sont un peu comme des listes ils contiennent plusieurs autres\n",
    "objets. À la différence des listes, les éléments d'un dictionnaire sont repérés\n",
    "par une clef et non par un indice. On peut utiliser tout type de clef : des\n",
    "nombres, des chaînes de caractères ou même des tuples.\n",
    "\n",
    "### Petit aperçu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{}\n"
     ]
    }
   ],
   "source": [
    "aa = dict()\n",
    "print(aa)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Une liste est délimitée par des crochets, un dictionnaire par des accolades. Par contre, comme pour les listes, La clef est donnée entre crochets :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dictionnaire :  {'M': 'Met', 'A': 'Ala', 'L': 'Leu'}\n",
      "un élément   :  Leu\n"
     ]
    }
   ],
   "source": [
    "aa[\"M\"] = \"Met\"\n",
    "aa[\"L\"] = \"Leu\"\n",
    "aa[\"A\"] = \"Ala\"\n",
    "print(\"dictionnaire : \", aa)\n",
    "print(\"un élément   : \", aa[\"L\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Remarque :* Les dictionnaires ne sont pas ordonnés. On voit sur l'exemple\n",
    "ci-dessus que bien que la clef \"A\" ait été ajoutée en dernier, elle apparait\n",
    "en premier dans le dictionnaire.\n",
    "\n",
    "On peut lister les `clefs` et les `valeurs` d'un dictionnaire ou les deux et \n",
    "les parcourir avec une boucle `for`.\n",
    "\n",
    "Liste des clefs :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['M', 'A', 'L'])\n",
      "M\n",
      "A\n",
      "L\n"
     ]
    }
   ],
   "source": [
    "print(aa.keys())\n",
    "for key in aa:\n",
    "    print(key)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pour les valeurs :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_values(['Met', 'Ala', 'Leu'])\n",
      "Met\n",
      "Ala\n",
      "Leu\n"
     ]
    }
   ],
   "source": [
    "print(aa.values())\n",
    "for val in aa.values():\n",
    "    print(val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut aussi parcourir les deux simultanément :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_items([('M', 'Met'), ('A', 'Ala'), ('L', 'Leu')])\n",
      "M  =  Met\n",
      "A  =  Ala\n",
      "L  =  Leu\n"
     ]
    }
   ],
   "source": [
    "print(aa.items())\n",
    "for key, val in aa.items():\n",
    "    print(key, \" = \", val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`aa.items()` retourne une liste de tuple de la forme `(clef, valeur)`.\n",
    "\n",
    "### Petit exercice \n",
    "\n",
    "1. Construire un dictionnaire qui met en relation le code à une lettre et le \n",
    "   code à trois lettre des acides aminés. \n",
    "   [Voir ce tableau](https://fr.wikipedia.org/wiki/Acide_amin%C3%A9_prot%C3%A9inog%C3%A8ne#Propri.C3.A9t.C3.A9s_chimiques).\n",
    "2. Construire un dictionnaire qui pour un acide aminé donné donne plusieurs\n",
    "   informations :\n",
    "   * Code à 1 lettre,\n",
    "   * Code à 3 lettres,\n",
    "   * Polarité\n",
    "   * Masse \n",
    "   * pI\n",
    "   * ...\n",
    "3. Afficher le nombre d'acides aminés contenus dans le dictionnaire\n",
    "4. Afficher la liste des acides aminés polaires\n",
    "\n",
    "**Conseil :** Les dictionnaires sont des objets permettant de structurer des\n",
    "données. C'est un modèle simpliste de base de données. Il est tout à fait possible\n",
    "de les imbriquer.\n",
    "\n",
    "### Pour le code génétique\n",
    "\n",
    "Pour le code génétique on peut envisager plusieurs solutions :\n",
    "\n",
    "* la clef est un tuple correspondant au codon :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{('U', 'G', 'A'): 'STOP', ('A', 'U', 'A'): 'Ile'}\n"
     ]
    }
   ],
   "source": [
    "gencode = {(\"A\", \"U\", \"A\"): \"Ile\", (\"U\", \"G\", \"A\"): \"STOP\"}\n",
    "print(gencode)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* la clef est un acide aminé, la valeur est la liste des codons associés"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Met': ['AUG'], 'Phe': ['UUU', 'UUC']}\n"
     ]
    }
   ],
   "source": [
    "gencode = {\"Phe\": [\"UUU\", \"UUC\"], \"Met\": [\"AUG\"]}\n",
    "print(gencode)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions\n",
    "\n",
    "L'idée est d'écrire dans un premier temps des fonctions qui réalisent les\n",
    "opérations suivantes puis d'écrire une classe qui contient les même\n",
    "fonctionnalités.\n",
    "\n",
    "1. Écrire une fonction qui génère aléatoirement un brin d'ADN. On pourra choisir\n",
    "   aléatoirement un codon STOP pour terminer le brin ou la partie codante.\n",
    "2. Écrire une fonction qui écrit le brin d'ADN dans un fichier\n",
    "3. Écrire une fonction qui lit un brin d'ADN dans un fichier\n",
    "4. Identifier s'il s'agit d'un brin d'ADN ou d'ARN et si ce brin est valide\n",
    "5. Statistique : extraire les informations suivantes d'un brin d'ADN\n",
    "    * Nombre total de bases\n",
    "    * Nombre de codons\n",
    "    * pourcentage de chaque base dans le brin\n",
    "6. Écrire une fonction qui réalise la transcription de l'ADN en ARN\n",
    "7. Écrire une fonction qui traduit l'ARN et renvoie la chaîne d'acides aminés\n",
    "   correspondante. Attention, elle doit s'arrêter au codon STOP.\n",
    "8. Statistique. Extraire des statistiques sur les acides aminés\n",
    "    * Le nombre d'acides aminés\n",
    "    * Le pourcentage d'acide aminé polaire\n",
    "    * Le nombre de chaque acide aminé différent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Programmation\n",
    "\n",
    "Commençons par charger les modules dont nous aurons besoin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "%pylab --no-import-all inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercice sur les dictionnaires\n",
    "\n",
    "En prennant les données de \n",
    "[ce tableau](https://fr.wikipedia.org/wiki/Acide_amin%C3%A9_prot%C3%A9inog%C3%A8ne#Propri.C3.A9t.C3.A9s_chimiques)\n",
    "on va construire une base de données sur les acides aminés.\n",
    "\n",
    "#### Correspondance des noms\n",
    "\n",
    "On peut reprendre l'exemple décrit plus haut pour introduire les dictionnaire et le compléter :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dictionnaire :  {'M': 'Met', 'A': 'Ala', 'L': 'Leu'}\n"
     ]
    }
   ],
   "source": [
    "aa = dict()\n",
    "aa[\"M\"] = \"Met\"\n",
    "aa[\"L\"] = \"Leu\"\n",
    "aa[\"A\"] = \"Ala\"\n",
    "print(\"dictionnaire : \", aa)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Avec tous les acides aminés :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'V': 'Val', 'C': 'Cys', 'W': 'Trp', 'I': 'Ile', 'Y': 'Tyr', 'K': 'Lys', 'R': 'Arg', 'E': 'Glu', 'D': 'Asp', 'G': 'Gly', 'M': 'Met', 'A': 'Ala', 'Q': 'Gln', 'L': 'Leu', 'T': 'Thr', 'S': 'Ser', 'H': 'His', 'F': 'Phe', 'N': 'Asn', 'P': 'Pro'}\n"
     ]
    }
   ],
   "source": [
    "aa = {\n",
    "    \"V\": \"Val\",\n",
    "    \"I\": \"Ile\",\n",
    "    \"L\": \"Leu\",\n",
    "    \"M\": \"Met\",\n",
    "    \"F\": \"Phe\",\n",
    "    \"A\": \"Ala\",\n",
    "    \"P\": \"Pro\",\n",
    "    \"W\": \"Trp\",\n",
    "    \"G\": \"Gly\",\n",
    "    \"Y\": \"Tyr\",\n",
    "    \"S\": \"Ser\",\n",
    "    \"T\": \"Thr\",\n",
    "    \"C\": \"Cys\",\n",
    "    \"N\": \"Asn\",\n",
    "    \"Q\": \"Gln\",\n",
    "    \"R\": \"Arg\",\n",
    "    \"K\": \"Lys\",\n",
    "    \"H\": \"His\",\n",
    "    \"D\": \"Asp\",\n",
    "    \"E\": \"Glu\"    \n",
    "}\n",
    "print(aa)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Base de données plus complète \n",
    "\n",
    "Pour cela on va *imbriquer* des dictionnaires. Voici un exemple pour un acide aminé :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "aa = {\n",
    "    \"Valine\": {\n",
    "        \"A\": \"V\",\n",
    "        \"Abr\": \"Val\",\n",
    "        \"masse\": 117.14784,\n",
    "        \"pI\": 5.96,\n",
    "        \"polaire\": False\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut ensuite utiliser nos données de la façon suivante :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "masse =  117.14784\n",
      "Abreviation :  Val\n"
     ]
    }
   ],
   "source": [
    "print(\"masse = \", aa[\"Valine\"][\"masse\"])\n",
    "print(\"Abreviation : \", aa[\"Valine\"][\"Abr\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Voici le dictionnaire complet :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "acideAmine = {\n",
    "    \"Alanine\": {\n",
    "        \"A\": \"A\",\n",
    "        \"Abr\": \"Ala\",\n",
    "        \"masse\": 89.09404,\n",
    "        \"pI\": 6.00,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Arginine\": {\n",
    "        \"A\": \"R\",\n",
    "        \"Abr\": \"Arg\",\n",
    "        \"masse\": 174.20274,\n",
    "        \"pI\": 10.76,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Asparagine\": {\n",
    "        \"A\": \"N\",\n",
    "        \"Abr\": \"Asn\",\n",
    "        \"masse\": 132.11904,\n",
    "        \"pI\": 5.41,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Aspartate\": {\n",
    "        \"A\": \"D\",\n",
    "        \"Abr\": \"Asp\",\n",
    "        \"masse\": 133.10384,\n",
    "        \"pI\": 2.77,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Cystéine\": {\n",
    "        \"A\": \"C\",\n",
    "        \"Abr\": \"Cys\",\n",
    "        \"masse\": 121.15404,\n",
    "        \"pI\": 5.07,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Glutamate\": {\n",
    "        \"A\": \"E\",\n",
    "        \"Abr\": \"Glu\",\n",
    "        \"masse\": 147.13074,\n",
    "        \"pI\": 3.22,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Glutamine\": {\n",
    "        \"A\": \"Q\",\n",
    "        \"Abr\": \"Gln\",\n",
    "        \"masse\": 146.14594,\n",
    "        \"pI\": 5.65,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Glycine\": {\n",
    "        \"A\": \"G\",\n",
    "        \"Abr\": \"Gly\",\n",
    "        \"masse\": 75.06714,\n",
    "        \"pI\": 5.97,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Histidine\": {\n",
    "        \"A\": \"H\",\n",
    "        \"Abr\": \"His\",\n",
    "        \"masse\": 155.15634,\n",
    "        \"pI\": 7.59,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Isoleucine\": {\n",
    "        \"A\": \"I\",\n",
    "        \"Abr\": \"Ile\",\n",
    "        \"masse\": 131.17464,\n",
    "        \"pI\": 6.02,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Leucine\": {\n",
    "        \"A\": \"L\",\n",
    "        \"Abr\": \"Leu\",\n",
    "        \"masse\": 131.17464,\n",
    "        \"pI\": 5.98,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Lysine\": {\n",
    "        \"A\": \"K\",\n",
    "        \"Abr\": \"Lys\",\n",
    "        \"masse\": 146.18934,\n",
    "        \"pI\": 9.74,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Methionine\": {\n",
    "        \"A\": \"M\",\n",
    "        \"Abr\": \"Met\",\n",
    "        \"masse\": 149.20784,\n",
    "        \"pI\": 5.74,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Phénylalanine\": {\n",
    "        \"A\": \"F\",\n",
    "        \"Abr\": \"Phe\",\n",
    "        \"masse\": 165.19184,\n",
    "        \"pI\": 5.48,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Proline\": {\n",
    "        \"A\": \"P\",\n",
    "        \"Abr\": \"Pro\",\n",
    "        \"masse\": 115.13194,\n",
    "        \"pI\": 6.30,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Sérine\": {\n",
    "        \"A\": \"S\",\n",
    "        \"Abr\": \"Ser\",\n",
    "        \"masse\": 105.09344,\n",
    "        \"pI\": 5.68,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Thréonine\": {\n",
    "        \"A\": \"T\",\n",
    "        \"Abr\": \"Thr\",\n",
    "        \"masse\": 119.12034,\n",
    "        \"pI\": 5.60,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Tryptophane\": {\n",
    "        \"A\": \"W\",\n",
    "        \"Abr\": \"Trp\",\n",
    "        \"masse\": 204.22844,\n",
    "        \"pI\": 5.89,\n",
    "        \"polaire\": False\n",
    "    },\n",
    "    \"Tyrosine\": {\n",
    "        \"A\": \"Y\",\n",
    "        \"Abr\": \"Tyr\",\n",
    "        \"masse\": 181.19124,\n",
    "        \"pI\": 5.66,\n",
    "        \"polaire\": True\n",
    "    },\n",
    "    \"Valine\": {\n",
    "        \"A\": \"V\",\n",
    "        \"Abr\": \"Val\",\n",
    "        \"masse\": 117.14784,\n",
    "        \"pI\": 5.96,\n",
    "        \"polaire\": False\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lecture des données\n",
    "\n",
    "Essayons maintenant de lire des données. Par exemple le nombre d'acides aminés :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n"
     ]
    }
   ],
   "source": [
    "print(len(acideAmine.keys()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La liste des acides aminés polaires :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Liste des acides aminés polaires :\n",
      "  *  Aspartate\n",
      "  *  Asparagine\n",
      "  *  Histidine\n",
      "  *  Arginine\n",
      "  *  Glutamate\n",
      "  *  Lysine\n",
      "  *  Tyrosine\n",
      "  *  Sérine\n",
      "  *  Thréonine\n",
      "  *  Glutamine\n"
     ]
    }
   ],
   "source": [
    "print(\"Liste des acides aminés polaires :\")\n",
    "for nom, data in acideAmine.items():\n",
    "    if data[\"polaire\"]:\n",
    "        print(\"  * \", nom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ou en une seule ligne avec une compréhension de liste :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Aspartate', 'Asparagine', 'Histidine', 'Arginine', 'Glutamate', 'Lysine', 'Tyrosine', 'Sérine', 'Thréonine', 'Glutamine']\n"
     ]
    }
   ],
   "source": [
    "print([nom for nom, data in acideAmine.items() if data[\"polaire\"]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Construire aléatoirement un brin d'ADN\n",
    "\n",
    "Définissons tout d'abord quelques constantes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "BASE_ADN = [\"A\", \"T\", \"C\", \"G\"]\n",
    "BASE_ARN = [\"A\", \"U\", \"C\", \"G\"]\n",
    "STOP = [\"TAA\", \"TAG\", \"TGA\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On va utiliser la fonction `randint()` de numpy pour choisir aléatoirement une base."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def gen_brins(nbases=10, typ=\"ADN\"):\n",
    "    \"\"\" \n",
    "    génère un fragment d'ADN ou ARN contenant nbases dont un codon stop à la fin\n",
    "\n",
    "    Args:\n",
    "        nbases (int): nombre de bases\n",
    "        typ (str): \"ADN\" ou \"ARN\"\n",
    "\n",
    "    Return:\n",
    "        fragment (str): le fragment d'ADN\n",
    "    \"\"\"\n",
    "    # type ADN ou ARN\n",
    "    if typ == \"ADN\":\n",
    "        bases = BASE_ADN\n",
    "    elif typ == \"ARN\":\n",
    "        bases = BASE_ARN\n",
    "    else:\n",
    "        raise ValueError(\"typ doit être 'ARN' ou 'ADN', typ = %s\" % typ)\n",
    "    \n",
    "    # construction fragment ADN\n",
    "    # nbases % 3 est le reste de la division de nbases par 3\n",
    "    # on prend nbases - nbases % 3 pour avoir un multiple de 3\n",
    "    fragment = \"\".join([bases[np.random.randint(0, 4)] for i in range(nbases - nbases % 3)])\n",
    "\n",
    "    codon_stop = STOP[np.random.randint(0, 2)]\n",
    "    if typ == \"ARN\":\n",
    "        codon_stop.replace(\"T\", \"U\")\n",
    "    # on remplace les 3 dernières bases par le codon STOP\n",
    "    fragment = fragment[:-3] + codon_stop\n",
    "\n",
    "    return fragment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Utilisons notre fonction :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AATGTGTAG\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "brin = gen_brins(10)\n",
    "print(brin)\n",
    "print(len(brin))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On a un brin de 12 bases avec les trois dernières qui correspondent à un codon STOP."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Écrire le brin dans un fichier\n",
    "\n",
    "On va simplement écrire la chaîne de caractère dans un fichier :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def write_file(fragment, fichier=\"brin.dat\"):\n",
    "    \"\"\" Écrit le fragment dans un fichier \"\"\"\n",
    "    with open(fichier, \"w\") as f:\n",
    "        f.write(fragment)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pour avoir un fichier plus lisible, on pourrait choisir d'afficher un certain nombre de codons par ligne avec un séparateur donné entre chaque codon :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def write_file(fragment, fichier=\"brin.dat\", codonParLigne=15, separateur=\" \"):\n",
    "    \"\"\" \n",
    "    Ecrit le fragment dans un fichier \n",
    "   \n",
    "    Args:\n",
    "       fichier (str): nom du fichier.\n",
    "       fragment (str): fragment d'ADN\n",
    "       codonParLigne (int): nombre de codons par ligne.\n",
    "       separateur (str): séparateur des codons\n",
    "    \"\"\"\n",
    "\n",
    "    # calcul nombre de codons dans le fragment\n",
    "    ncodon = len(fragment) // 3\n",
    "\n",
    "    with open(fichier, \"w\") as out:\n",
    "        n = 0\n",
    "        while n < ncodon:\n",
    "            out.write(fragment[3*n : 3*n + 3] + separateur)\n",
    "            n += 1\n",
    "            if n % codonParLigne == 0:\n",
    "                out.write(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le symbole `//` désigne une division entière.\n",
    "\n",
    "### Lire le brin dans un fichier\n",
    "\n",
    "On peut écrire une fonction qui lit de façon directe le fichier et supprime tout les séparateurs ou sauts de ligne."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def read_adn(fichier, separateur=\" \"):\n",
    "    \"\"\" lit un brin d'ADN sur un fichier \"\"\"\n",
    "    with open(fichier, \"r\") as f:\n",
    "        fragment = f.read()\n",
    "    fragment = fragment.replace(separateur, \"\").replace(\"\\n\", \"\")\n",
    "    return fragment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exemple d'utilisation :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ATCGTTTAGCTATATTTGCCCTTCAACCGAAACCAACTGCAGTTCTGGTTTAAGTGGAGCTGATGGCTCGTCTCGCCGCCATTGGTATTCCGATGTTAA\n"
     ]
    }
   ],
   "source": [
    "fragment = gen_brins(100)\n",
    "print(fragment)\n",
    "write_file(fragment, codonParLigne=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ATC GTT TAG CTA TAT \r\n",
      "TTG CCC TTC AAC CGA \r\n",
      "AAC CAA CTG CAG TTC \r\n",
      "TGG TTT AAG TGG AGC \r\n",
      "TGA TGG CTC GTC TCG \r\n",
      "CCG CCA TTG GTA TTC \r\n",
      "CGA TGT TAA "
     ]
    }
   ],
   "source": [
    "!cat brin.dat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ATCGTTTAGCTATATTTGCCCTTCAACCGAAACCAACTGCAGTTCTGGTTTAAGTGGAGCTGATGGCTCGTCTCGCCGCCATTGGTATTCCGATGTTAA'"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "read_adn(\"brin.dat\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Identification du brin\n",
    "\n",
    "Écrivons une fonction qui vérifie si le brin est un brin d'ADN ou d'ARN et s'il est valide. Pour l'exercice, on considèrera que le brin est \"valide\" s'il contient les bases adéquates et si le nombre de bases est un multiple de 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def is_valid(fragment, typ=\"ADN\"):\n",
    "    \"\"\" \n",
    "    indique si le fragment est valide contenu du type indiqué \n",
    "    \n",
    "    Args:\n",
    "        fragment (str): fragment d'ADN ou ARN\n",
    "        typ (str): \"ADN\" ou \"ARN\"\n",
    "    \n",
    "    Returns\n",
    "        True or False\n",
    "    \"\"\"\n",
    "    # type ADN ou ARN\n",
    "    if typ == \"ADN\":\n",
    "        bases = BASE_ADN\n",
    "    elif typ == \"ARN\":\n",
    "        bases = BASE_ARN\n",
    "    else:\n",
    "        raise ValueError(\"typ doit être 'ARN' ou 'ADN', typ = %s\" % typ)\n",
    "        \n",
    "    # valeur retournée\n",
    "    valid = True\n",
    "    \n",
    "    # test multiple de 3\n",
    "    if len(fragment) % 3 != 0:\n",
    "        valid = False\n",
    "        print(\"Error number of bases\")\n",
    "    # test des bases :\n",
    "    else:\n",
    "        for base in fragment:\n",
    "            if base not in bases:\n",
    "                valid = False\n",
    "                print(\"Error : \", base, \" is not valid.\")\n",
    "                break\n",
    "    \n",
    "    return valid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test de notre fonction :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "adn_ok  :  True\n",
      "Error number of bases\n",
      "adn_bad :  False\n",
      "arn_ok  :  True\n",
      "Error :  Y  is not valid.\n",
      "arn_bad :  False\n"
     ]
    }
   ],
   "source": [
    "adn_ok = \"TAATCCTAAAACCCT\"\n",
    "adn_bad = \"TAATCCTAAAACCT\" # nbre de bases\n",
    "arn_ok = \"UAAUCCUAAAACCCU\"\n",
    "arn_bad = \"UAAUYCUAAXACCCU\" # nom des bases\n",
    "print(\"adn_ok  : \", is_valid(adn_ok))\n",
    "print(\"adn_bad : \", is_valid(adn_bad))\n",
    "print(\"arn_ok  : \", is_valid(arn_ok, typ=\"ARN\"))\n",
    "print(\"arn_bad : \", is_valid(arn_bad, typ=\"ARN\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Statistiques sur le brin\n",
    "\n",
    "Extraire les informations suivantes d'un brin d'ADN\n",
    "\n",
    "* Nombre total de bases\n",
    "* Nombre de codons\n",
    "* pourcentage de chaque base dans le brin\n",
    "\n",
    "Le nombre total de bases et de codon est donné par la fonction `len()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CCCTCAGGACAGTTTTAA\n"
     ]
    }
   ],
   "source": [
    "adn = gen_brins(18)\n",
    "print(adn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nombre de bases :  18\n"
     ]
    }
   ],
   "source": [
    "print(\"nombre de bases : \", len(adn))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nombre de codons :  6\n"
     ]
    }
   ],
   "source": [
    "print(\"nombre de codons : \", len(adn) // 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculons maintenant le nombre de chaque base. Nous allons utiliser la méthode `count()` de l'objet `str`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adn.count(\"T\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Écriture de la fonction :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_stat_base(fragment, typ=\"ADN\"):\n",
    "    \"\"\" Compte le nombre de chaque type de base et retourne un dictionnaire \"\"\"\n",
    "    # type ADN ou ARN\n",
    "    if typ == \"ADN\":\n",
    "        bases = BASE_ADN\n",
    "    elif typ == \"ARN\":\n",
    "        bases = BASE_ARN\n",
    "    else:\n",
    "        raise ValueError(\"typ doit être 'ARN' ou 'ADN', typ = %s\" % typ)\n",
    "    # comptage\n",
    "    data = dict()\n",
    "    for base in bases:\n",
    "        data[base] = fragment.count(base)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ce qui donne : "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CCCTCAGGACAGTTTTAA\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'A': 5, 'C': 5, 'G': 3, 'T': 5}"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(adn)\n",
    "get_stat_base(adn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combinons avec un graphique matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "brin valide ?  True\n",
      "ATCGGAATCATCCTCCGGGACACTCGTTGCGGAGGTGCCTACTGAGAAGGTGATCCATCTAACTACCACCCCCCGATGGCTTCAGGCCGTATTATAATAGTCCCATTGCATGTACAATCCCATGACCGCCAGGTGCAGGTCAGGTCGTGATGCCTTGTGGACACTACACTTCCCCTAACGGCCCGTACAAACCTTCGTGCGGGTATCAAGGCTAAGTTATCGTTAGCACTTCCTAGCTCAGACCCTAGTCTGCGAGGTTGCTCATGCCTACGGTACTTGTGGCAAGTCATCGAAGAAACGAGATGGCAACATTTGGGGTGGGGGGGGCCGTCATTTGAACTAGTCGCCGGCGCGATTTGAGAATAAAAAAGAAACTGGCTAATTCCCGCTGCAACGCTGTAGATATATGCCACCAGTTCCGCCTCTACTTTGAAGATACTGTCTCCTGCGACTTAACTAAAGCGACATCATCTATGTCGCTGGGCTACTCCTCCAAATGGAGAGCCTAGTTGGTAAATCAATGGTGCGCAGTTTATAAAATCGAAGGTCGACATAGGTCCTCACGTGGTCTTTCGTTTCAGGCGCATGTCAGTAGCATCTAATACTTGAACTCTATTCCGCATTGTAGCCCTAGTTGCTCCAGTATGAGTGAAATGCTTTGTATGGGGGTGGAGGCATCGCGCCCCTACACTAGAGGCTGAGGCCTAAGGCATGATTTCATGGTGATAATAAAGTTCTGCCTCTATGGGCCAGTCTAGCAACCTCGTGTGCTCCCTCAAACCAAAATAACAAGAGGATGTACCCGACTTTCAGCTCTGACGCATCCCATACCCCTGGTCCTTATCAGGACGCTATTCGCAAGGAATAAAAGGGGTAGTTACTCGAGATTTGGCGCAGATCTCGAGACAACGAGATGGTAGGGTGAGTGCGACCCAAACAGCTTATGTTGCTGCTCGGGACCGACACTGTTAAAAAGTAGACCGGTTCAGTCAATGATAG\n",
      "\n",
      "Statistique :\n",
      "{'T': 249, 'G': 249, 'C': 250, 'A': 251}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1057c4908>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x105772b00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# construction d'un brin\n",
    "adn = gen_brins(1000)\n",
    "print(\"brin valide ? \", is_valid(adn))\n",
    "print(adn)\n",
    "\n",
    "# calcul du nombre de chaque type de base\n",
    "print(\"\\nStatistique :\")\n",
    "data = get_stat_base(adn)\n",
    "print(data)\n",
    "\n",
    "# graphique matplotlib\n",
    "plt.bar([x + .2 for x in range(4)], [(n / len(adn)) * 100. for n in data.values()], width=.6)\n",
    "plt.ylabel(\"% des bases\")\n",
    "plt.xticks([x + .5 for x in range(4)], list(data.keys()))\n",
    "plt.xlim()\n",
    "plt.ylim(0, 50)\n",
    "plt.title(\"Statistique sur le brin ADN\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Transcription de l'ADN\n",
    "\n",
    "Cette fonction est très simple à écrire. On utilise la fonction `replace()` de l'objet `str`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def transcription(fragment):\n",
    "    \"\"\"\n",
    "    Transcrit un brin d'ADN (base A T C G) en brin d'ARN (base A U C G).\n",
    "    \n",
    "    Args:\n",
    "        fragment (str): fragment d'ADN\n",
    "        \n",
    "    Return:\n",
    "        arn (str): fragment d'ARN\n",
    "    \"\"\"\n",
    "    return fragment.replace(\"T\", \"U\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test de la fonction :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GCTCCGTTTGTGCCCTCCTAG\n",
      "GCUCCGUUUGUGCCCUCCUAG\n"
     ]
    }
   ],
   "source": [
    "adn = gen_brins(21)\n",
    "print(adn)\n",
    "arn = transcription(adn)\n",
    "print(arn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Traduction de l'ARN\n",
    "\n",
    "Pour l'étape de traduction, il nous faut le code génétique. Commençons par écrire un dictionnaire qui contient le code. Les clefs du dictionnaire seront les codes à trois lettres des acides-aminés. Pour chaque acide aminé, on associe la liste des codons correspondant. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# code genetique\n",
    "geneticCode = {\"Leu\": [\"UUA\", \"UUG\", \"CUU\", \"CUC\", \"CUA\", \"CUG\"],\n",
    "               \"Phe\": [\"UUU\", \"UUC\"],\n",
    "               \"Ile\": [\"AUU\", \"AUC\", \"AUA\"],\n",
    "               \"Met\": [\"AUG\"],\n",
    "               \"Val\": [\"GUU\", \"GUC\", \"GUA\", \"GUG\"],\n",
    "               \"Ser\": [\"UCU\", \"UCC\", \"UCA\", \"UCG\", \"AGU\", \"AGC\"],\n",
    "               \"Pro\": [\"CCU\", \"CCC\", \"CCA\", \"CCG\"],\n",
    "               \"Thr\": [\"ACU\", \"ACC\", \"ACA\", \"ACG\"],\n",
    "               \"Ala\": [\"GCU\", \"GCC\", \"GCA\", \"GCG\"],\n",
    "               \"Tyr\": [\"UAU\", \"UAC\"],\n",
    "               \"STOP\": [\"UAA\", \"UAG\", \"UGA\"],\n",
    "               \"His\": [\"CAU\", \"CAC\"],\n",
    "               \"Gln\": [\"CAA\", \"CAG\"],\n",
    "               \"Asn\": [\"AAU\", \"AAC\"],\n",
    "               \"Lys\": [\"AAA\", \"AAG\"],\n",
    "               \"Asp\": [\"GAU\", \"GAC\"],\n",
    "               \"Glu\": [\"GAA\", \"GAG\"],\n",
    "               \"Cys\": [\"UGU\", \"UGC\"],\n",
    "               \"Trp\": [\"UGG\"],\n",
    "               \"Arg\": [\"CGU\", \"CGC\", \"CGA\", \"CGG\", \"AGA\", \"AGG\"],\n",
    "               \"Gly\": [\"GGU\", \"GGC\", \"GGA\", \"GGG\"]}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ensuite on écrit une fonction qui pour un codon donné, retourne le nom de l'acide aminé :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def codon_to_aa(uncodon):\n",
    "    \"\"\"\n",
    "    Renvoie le code à trois lettres d'un acide aminé correspondant au codon\n",
    "    donné en argument.\n",
    "    \n",
    "    Args:\n",
    "        uncodon (str): codon de l'ARN.\n",
    "        \n",
    "    Return:\n",
    "        acideAmine (str): code à trois lettres de l'acide aminé correspondant.\n",
    "    \"\"\"        \n",
    "    acideAmine = None\n",
    "    identify = False\n",
    "    for aa, codons in geneticCode.items():\n",
    "        if uncodon in codons:\n",
    "            acideAmine = aa\n",
    "            identify = True\n",
    "            break\n",
    "            \n",
    "    if not identify:\n",
    "        raise ValueError(\"ERREUR : codon '%s' non identifié\" % uncodon)\n",
    "\n",
    "    return acideAmine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exemples et vérification du bon fonctionnement de la fonction :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gln\n"
     ]
    }
   ],
   "source": [
    "print(codon_to_aa(\"CAA\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "ERREUR : codon 'AZF' non identifié",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-60-241be5245c8c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcodon_to_aa\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"AZF\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-58-820149466cab>\u001b[0m in \u001b[0;36mcodon_to_aa\u001b[0;34m(uncodon)\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0midentify\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ERREUR : codon '%s' non identifié\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0muncodon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0macideAmine\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: ERREUR : codon 'AZF' non identifié"
     ]
    }
   ],
   "source": [
    "print(codon_to_aa(\"AZF\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maintenant écrivons la fonction qui traduit tout le brin d'ARN :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def traduction(fragment):\n",
    "    \"\"\"\n",
    "    Traduit le brin d'ARN en séquence peptidique.\n",
    "    \n",
    "    Args:\n",
    "        fragment (str): fragment d'ARN à traduire\n",
    "        \n",
    "    Returns:\n",
    "        sequence (str): séquence peptidique.\n",
    "    \"\"\"\n",
    "    #nombre de codons dans le fragment\n",
    "    ncodon = len(fragment) // 3\n",
    "    \n",
    "    # traduction    \n",
    "    sequence = \"\"\n",
    "    n = 0\n",
    "    while n < ncodon:\n",
    "        aa = codon_to_aa(fragment[3*n : 3*n+3])\n",
    "        if aa != \"STOP\":\n",
    "            sequence += aa + \"-\"\n",
    "            n += 1\n",
    "        else:\n",
    "            sequence += aa\n",
    "            break\n",
    "    return sequence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exemple :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GGTTCTTGCCTAAGTCGCTAG\n",
      "GGUUCUUGCCUAAGUCGCUAG\n",
      "la sequence contient  7 acides aminés\n",
      "Gly-Ser-Cys-Leu-Ser-Arg-STOP\n"
     ]
    }
   ],
   "source": [
    "adn = gen_brins(21)\n",
    "print(adn)\n",
    "arn = transcription(adn)\n",
    "print(arn)\n",
    "sequence = traduction(arn)\n",
    "print(\"la sequence contient \", len(sequence.split(\"-\")), \"acides aminés\")\n",
    "print(sequence)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Statistiques sur la séquence d'acides aminés\n",
    "\n",
    "Extraire les informations suivantes d'une séquence d'acides aminés.\n",
    "\n",
    "* Le nombre d'acides aminés\n",
    "* Le pourcentage d'acide aminé polaire\n",
    "* Le nombre de chaque acide aminé différent\n",
    "\n",
    "#### Nombre d'acides aminés\n",
    "\n",
    "On va supposer que la séquence est donnée dans le format de notre fonction `traduction()`. Dans ce cas, les acides aminés sont séparés par un `-`. On va combiner les fonctions `split()` et `len()` pour calculer le nombre d'acides aminés dans la séquence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_nombre_aa(sequence):\n",
    "    \"\"\" \n",
    "    Retourne le nombre d'acides aminés dans la séquence. Le codon STOP n'est\n",
    "    pas compté comme un acide aminé. \n",
    "    \"\"\"\n",
    "    return len(sequence.split(\"-\")[:-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Testons la fonction :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre d'acide amine :  6\n"
     ]
    }
   ],
   "source": [
    "sequence = \"Leu-Ser-Ser-Arg-Asn-Arg-STOP\"\n",
    "print(\"Nombre d'acide amine : \", get_nombre_aa(sequence))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Pourcentage d'acides aminés polaires\n",
    "\n",
    "Nous allons nous servir du dictionnaire `acideAmine` pour connaître la polarité de chaque acide aminé."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_polarite(sequence):\n",
    "    \"\"\"\n",
    "    Retourne le pourcentage d'acides aminés polaires dans une séquence.\n",
    "    \"\"\"\n",
    "    # liste des acides aminés sauf codon STOP\n",
    "    listeaa = sequence.split(\"-\")[:-1]\n",
    "    \n",
    "    npolaire = 0\n",
    "    for aa in listeaa:\n",
    "        for aaname in acideAmine:\n",
    "            if acideAmine[aaname][\"Abr\"] == aa and acideAmine[aaname][\"polaire\"]:\n",
    "                npolaire += 1\n",
    "    return npolaire / len(listeaa) * 100."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test de la fonction :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pourcentage d'acides amines polaires :  83.33333333333334\n"
     ]
    }
   ],
   "source": [
    "sequence = \"Leu-Ser-Ser-Arg-Asn-Arg-STOP\"\n",
    "print(\"pourcentage d'acides amines polaires : \", get_polarite(sequence))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Remarque :** Cette implémentation est particulièrement inefficace car il faut parcourir tout le dictionnaire `acideAmine` pour chaque acide aminé de la séquence.\n",
    "\n",
    "#### Nombre de chaque acide aminé différent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_stat_aa(sequence):\n",
    "    \"\"\" Compte le nombre de chaque type d'acide aminé et retourne un dictionnaire \"\"\"\n",
    "    # liste des acides aminés sauf codon STOP\n",
    "    listeaa_sequence = sequence.split(\"-\")[:-1]\n",
    "    \n",
    "    # liste des 20 codes a trois lettres des acides aminés\n",
    "    listeaa = [acideAmine[aa][\"Abr\"] for aa in acideAmine]\n",
    "    \n",
    "    # statistique\n",
    "    data = dict()\n",
    "    for aa in listeaa:\n",
    "        naa = listeaa_sequence.count(aa)\n",
    "        if naa != 0:\n",
    "            data[aa] = naa\n",
    "    \n",
    "    return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculs sur notre séquence :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistique :  {'Asn': 1, 'Ser': 2, 'Arg': 2, 'Leu': 1}\n"
     ]
    }
   ],
   "source": [
    "sequence = \"Leu-Ser-Ser-Arg-Asn-Arg-STOP\"\n",
    "print(\"Statistique : \", get_stat_aa(sequence))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dans un graphique avec matplotlib\n",
    "\n",
    "Nous allons maintenant combiner les fonctions précédentes pour faire un diagramme avec matplotlib qui remplit les conditions suivantes :\n",
    "\n",
    "* Il affiche le nombre de chaque acide aminé dans la séquence\n",
    "* Les acides aminés polaires sont en rouge\n",
    "* Les acides aminés apolaires sont en bleu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "brin valide ?  True\n",
      "GATAATAAATGTTGTTCCATCCGTTCCTCTCAATGGATGTTCTACGCACCCCCGCGACAGGTCTCAGAAACTACCGGGTCCATTGAATCCTCCTGATAATTTGTTGTGAGTAAAGCTTACATTATGTCTACGGGCATATTGTGAAAGCCATTCTGAAGACATACGTCCTGAGGAATAAGCTGGATACCCACACAACAGAGTATGCAGCGGTCGGTAGCCCACGGCGACTCCACCCATAGTGCATACGGTTTGGTGACTTCCAGGGCGCCTGTCGTAGCTGGTTAAAACAGCATGCTAGCTCTAATTTCTTAACACTATTGGTCAACTAAGTACTGATATTCGCAGAAACTATTAGGATTCCACAGTTCGTACCCTAGTGCAGTACCATGTAAGGCGTGGCAACAATCGAGATCCGATATTCCTAACAGTTTACCCCTTACGTGAAGCACTCAACGAAACTACTTCTGCTTCCTCGTCAACGGCGCGCATTCGGTTGTCTAAAAAATAATGGCCGCGCAATCTATCGTTGCTCCACCGAGTGTTGAACAGCTGTCGATACTGGCCATTGAGCGATCAATTCTACCTAATGATGCATCTGATATCAATATCGCGATTGCCTGCATGGGTAGCCAGAAGGCAACGATTAAGGCAAGCGGAGCACGTGGGATTCCTGTTTTAGTCCCAAATAGTGAAACTAGCCATTGTCAGTGTATTTTTGAATTTGGCAGGTCAAACATGATATAGAGGACCGTTCCAATGACAATGGTAATAATGAAAATGCATCCAATAACGATTGAAATAGGCAACGTCCCCTGCTTAGGCAAGATACCTCATATCACTCCGGCATCGTCTTGTACCTGCAGGCAGCAGCTCGTAGCTAAGGGAAGATCTTTACCCGATTAAAAATAAATGGACGGGGCGAATCACCTGGGGGTAGTGGCTATCTGACTAGGACCGGTATCCCGAAGCCCAGAATGTTCGTTTATACTCTAGAACTAG\n",
      "\n",
      "sequence : \n",
      " Asp-Asn-Lys-Cys-Cys-Ser-Ile-Arg-Ser-Ser-Gln-Trp-Met-Phe-Tyr-Ala-Pro-Pro-Arg-Gln-Val-Ser-Glu-Thr-Thr-Gly-Ser-Ile-Glu-Ser-Ser-STOP\n",
      "Nombre d'acide aminé :  31\n",
      "\n",
      "statistiques : \n",
      " {'Lys': 1, 'Glu': 2, 'Phe': 1, 'Ile': 2, 'Thr': 2, 'Met': 1, 'Gly': 1, 'Arg': 2, 'Gln': 2, 'Ala': 1, 'Val': 1, 'Asp': 1, 'Cys': 2, 'Pro': 2, 'Asn': 1, 'Tyr': 1, 'Ser': 7, 'Trp': 1}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-1.1907753254325724,\n",
       " 1.1989738647394892,\n",
       " -1.1964101608838691,\n",
       " 1.1998350110200235)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10677a1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# construction d'un brin\n",
    "adn = gen_brins(1000)\n",
    "print(\"brin valide ? \", is_valid(adn))\n",
    "print(adn)\n",
    "\n",
    "# calcul du nombre de chaque type de base\n",
    "arn = transcription(adn)\n",
    "sequence = traduction(arn)\n",
    "print(\"\\nsequence : \\n\", sequence)\n",
    "print(\"Nombre d'acide aminé : \", get_nombre_aa(sequence))\n",
    "data = get_stat_aa(sequence)\n",
    "print(\"\\nstatistiques : \\n\", data)\n",
    "\n",
    "# construction du graphique de type pie\n",
    "labels = list(data.keys())\n",
    "heights = list(data.values())\n",
    "\n",
    "# définition des couleurs en fonction de la polarité\n",
    "colors = list()\n",
    "explode = list()\n",
    "for aa in labels:\n",
    "    for aaname in acideAmine:\n",
    "        if acideAmine[aaname][\"Abr\"] == aa:\n",
    "            if acideAmine[aaname][\"polaire\"]:\n",
    "                colors.append(\"red\")\n",
    "                explode.append(0.2)\n",
    "            else:\n",
    "                colors.append(\"blue\")\n",
    "                explode.append(0.)\n",
    "\n",
    "plt.figure(figsize=(10, 10))\n",
    "plt.pie(heights, labels=labels, colors=colors, explode=explode,\n",
    "        shadow=True, autopct='%1.1f%%', startangle=0)\n",
    "plt.axis(\"equal\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
